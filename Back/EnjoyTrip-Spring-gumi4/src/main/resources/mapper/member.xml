<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.member.mapper.MemberMapper">

	<!-- 로그인 -->
	<resultMap type="memberDto" id="member">
		<result column="user_id" property="userId" />
		<result column="user_password" property="userPwd" />
	</resultMap>
	
	<!-- get Info -->
	<resultMap type="memberDto" id="memberInfo">
		<result column="id" property="Id" />
		<result column="user_id" property="userId" />
		<result column="join_date" property="joinDate" />
		<result column="user_name" property="userName" />
		<result column="user_nickname" property="userNickname" />
		<result column="user_password" property="userPwd" />
	</resultMap>

	<!-- 회원가입 -->
	<resultMap type="memberDto" id="memberAll" extends="member">
		<result column="user_id" property="userId" />
		<result column="user_name" property="userName" />
		<result column="user_password" property="userPwd" />
		<result column="user_nickname" property="userNickname" />
		<result column="user_gender" property="userGender" />
		<result column="user_birthday" property="userBirthday" />
		<result column="join_date" property="joinDate" />
	</resultMap>

	<!-- 팔로우 리스트 -->
	<resultMap type="memberListDto" id="follow">
		<result column="id" property="Id" />
		<result column="user_id" property="userId" />
		<result column="user_nickname" property="userNickname" />
	</resultMap>
	
	<!-- letter Dto -->
	<resultMap type="memberLetterDto" id="letter">
		<result column="id" property="Id" />
		<result column="from_id" property="fromId" />
		<result column="nickname" property="nickName" />
		<result column="to_id" property="toId" />
		<result column="subject" property="subject" />
		<result column="content" property="content" />
		<result column="send_date" property="sendDate" />
		<result column="is_read" property="isRead" />
	</resultMap>
	
	

	<!-- 아이디 중복 체크 -->
	<select id="idCheck" parameterType="memberDto" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId}
	</select>

	<!-- 회원가입 -->
	<insert id="join" parameterType="memberDto">
		insert into members (user_id,
		user_name, user_password, user_nickname, user_gender, user_birthday,
		join_date)
		values (#{userId}, #{userName}, #{userPwd}, #{userNickname},
		#{userGender}, #{userBirthday}, now())
	</insert>

	<!-- 로그인 -->
	<select id="login" parameterType="memberDto"
		resultMap="memberAll">
		select *
		from members
		where user_id = #{userId} and
		user_password = #{userPwd}
	</select>

	<!-- 유저 한명 조회 -->
	<select id="getMember" parameterType="string"
		resultMap="memberAll">
		select user_id, user_name, user_password, join_date
		from
		members
		where user_id = #{userId}
	</select>

	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="String">
		delete from members
		where user_id = #{userId}
	</delete>

	<!-- 회원정보 수정 -->
	<update id="updateMember" parameterType="memberDto">
		update members
		<trim prefix="set" suffixOverrides=",">
			<if test="userPwd != null">user_password = #{userPwd},</if>
			<if test="userNickname != null">user_nickname = #{userNickname},</if>
		</trim>
		where user_id = #{userId}
	</update>

	<update id="saveRefreshToken" parameterType="map">
		update members
		set
		token = #{token}
		where user_id = #{userId}
	</update>

	<select id="getRefreshToken" parameterType="string"
		resultType="string">
		select token
		from members
		where user_id = #{userId}
	</select>

	<update id="deleteRefreshToken" parameterType="map">
		update members
		set
		token = #{token, jdbcType=VARCHAR}
		where user_id = #{userId}
	</update>

	<select id="userInfo" parameterType="string"
		resultMap="memberInfo">
		select id, user_name, user_id, user_nickname, join_date,
		user_password
		from members
		where user_id = #{userId}
	</select>

	<!-- 팔로우 쿼리 -->
	<select id="listfollow" parameterType="string"
		resultMap="follow">
		SELECT id, user_id, user_nickname
		FROM members
		WHERE id in (SELECT to_userId FROM follows WHERE from_userId IN (SELECT id
		FROM members WHERE user_id = #{userId}))
	</select>

	<!-- 팔로워 쿼리 -->
	<select id="listfollower" parameterType="string"
		resultMap="follow">
		SELECT id, user_id, user_nickname
		FROM members
		WHERE id in (SELECT from_userId FROM follows WHERE to_userId IN (SELECT id
		FROM members WHERE user_id = #{userId}));
	</select>
	
	<!-- 유저 검색 -->
	<select id="listSearchUser" parameterType="string" resultMap="follow">
	SELECT id, user_id, user_nickname
	FROM members
	WHERE user_id LIKE '%${userId}%' OR user_nickname LIKE '%${userId}%'
	</select>
	
	<!-- 팔로우 추가 쿼리 -->
	<select id="following" parameterType="string">
	INSERT INTO follows
	VALUES(#{toId}, #{fromId}, 1)
	</select>

	<!-- 팔로우 취소 쿼리 -->
	<select id="unFollow" parameterType="string">
	DELETE
	FROM follows
	WHERE to_userId = #{fromId} AND from_userId = #{toId}
	</select>
	
	
	<!-- 받은 쪽지 GET -->
	<select id="receiveGetList" parameterType="string" resultMap="letter">
	SELECT id, from_id, (select user_nickname from members where id = from_id) as nickname, (select user_nickname from members where id = to_id) as to_id, subject, content, send_date, is_read
	FROM letters
	WHERE to_id IN (SELECT id FROM members WHERE user_id = #{userId})
	</select>
	
	<!-- 보낸 쪽지 GET -->
	<select id="sendGetList" parameterType="string" resultMap="letter">
	SELECT id, from_id, (select user_nickname from members where id = from_id) as nickname, (select user_nickname from members where id = to_id) as to_id, subject, content, send_date, is_read
	FROM letters
	WHERE from_id IN (SELECT id FROM members WHERE user_id = #{userId})
	</select>
	
	<!-- 받은 쪽지(Detail) GET -->
	<select id="getDetailLetter" parameterType="string" resultMap="letter">
	SELECT id, from_id, (select user_nickname from members where id = from_id) as nickname, (select user_nickname from members where id = to_id) as to_id, subject, content, send_date
	FROM letters
	WHERE id = #{userId}
	</select>
	
	
	<!-- 쪽지 송신 -->
	<insert id="sendLetter" parameterType="memberLetterDto">
	INSERT INTO letters(from_id, to_id, subject, content, send_date)
	VALUES(#{fromId}, #{toId}, #{subject}, #{content}, now());
	</insert>
	
	<!-- 쪽지 읽음여부 처리 -->
	<update id="isReadCheck" parameterType="String">
		UPDATE letters
		SET is_read = 1
		WHERE id = #{contentId}
	</update>
	
	
	<!-- 쪽지 삭제 -->
	<delete id="deleteLetter" parameterType="string">
		DELETE
		FROM letters
		WHERE id = #{Id}
	</delete>
	
	<!-- 읽지 않은 쪽지 개수 조회 -->
	<select id="getReceiveCount" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM letters
		WHERE to_id = #{userId} AND is_read = 0
	</select>
	
	<!-- ADMIN -->
	<!-- <select id="listMember" resultMap="memberAll"> select user_name, user_id, 
		user_password, join_date from members order by join_date </select> -->





</mapper>